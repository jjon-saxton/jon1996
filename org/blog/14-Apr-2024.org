#+title: 14 Sep 2024 - JavaScript...The Scourge!
#+description: Explaining why JavaScript is bad and what can be done about it
#+author: Jon Saxton
#+html_head: <link href="../../styles/main.css" rel="stylesheet" type="text/css" />

So I have switched my workflow from a GUI all the time one, like any sane desktop computer user, to a GUI as needed workflow like a complete the complete Linux nerd that I am. What is a GUI-as-needed workflow? Well many users relay on a Graphical User Interface (GUI) to interact with their computer with fancy buttons and check boxes and windows and all those wonderful and helpful graphical tools. Its great and makes it easy for more users to work with their computer, but it also adds complexity, resources, and other difficulties in maintaining computer software and environments. Linux provides a simple console as part of the kernel which allows you to run a shell (bash, zsh, fish, etc.). This console has limits, for example it is limited to single-bit ASCII characters and 16 bit colors. The Linux kernel also provides a framebuffer which can be used for displaying fullscreen images and graphics and even video, but this typically takes over the entire display meaning you cannot use multiple terminals. The Linux kernel also provides up to about eight terminal devices (tty) that interface with the console and you can use these to run commands on (similar to the workspaces or desktops in a GUI interface), because there is much you can do in the these tty's I have opted to try an experiment that works well. Use these TTYs whenever I can and only run a graphical environment when I absolutely have to. Thanks to ~emacs~ and a terminal browser (~elinks~, no relation) I can do quite a lot in the tty, including watch videos thanks to ~mpv~ and ~yt-dlp~. I have two Wayland compositors installed just in case and, if I do need a GUI for some reason I can easily just run them as a shell command and have access to a full Wayland session.

* JavaScript is a Scourge?
Well, with all that said, you are probably wondering what I'm talking about and why I even put JavaScript in the title of this blog post. Wouldn't even blame you for wonder why I'm blogging about all this on a 1996 era inspired site like this one, well here's the thing, remember how I mentioned ~elinks~ up there? ~elinks~ is a terminal browser and its text only, I also mentioned emacs, which has its own browser named eww, which is not entirely text-only, but has limited support for HTML rendering and neither of this browsers have JavaScript support. The problem is that the web of today is seemingly built around JavaScript to the point that many of today's sites simple refuse to work without it. Most of the time it isn't even that the site /need/ JavaScript to display its contents, but the site admins use JavaScript to inject ads or verify cookies or block portions of the site for non-subscribers and just refuse to support a use case where JavaScript is not readily available.

To understand why this is a problem we need to talk about JavaScript a little bit. I started experimenting with JavaScript shortly after I started working on websites. It has been around for ages and has some really nice features. You can do a lot with JavaScript and so it was pretty common for us to want to use it, but there were /two/ reasons why we avoided it:
1. JavaScript was difficult to troubleshoot
2. We were told not every browser supported every feature of JavaScript at the time.
The easiest thing to do was to avoid it for any major functionality of the site and only use it to make a site easier to navigate when JavaScript was present or prettier, but to remember to make sure that every page and all the information of the site could be accessed even if browsers had JavaScript disabled or did not support it. This was the same advice we were given for ~framesets~, by the way.

* Okay So Why is JavaScript a Scourge?
I know this only really explains why I'm talking about this on a 1996 era-inspired blog, but don't worry there's more. You see JavaScript runs code. JavaScript runs code *on your machine*! Do we always know what that code is doing or accessing? Can a browser ensure that JavaScript can't damage the local machine? Do they? The answers to these questions are actually the reason why many legacy, text-only browsers like ~elinks~ don't support JavaScript out-of-the-box (it should be noted that ~elinks~ can be compiled with /some/ JavaScript support). Those answers are mixed, but are alarmingly mostly 'no'. We can't always tell what JavaScript is doing or accessing. Browsers can sandbox JavaScript to their own page processes, but don't always do so. This can pose a security risk with arbitrary code being executed on a user's machine often without them being aware of it. This is a bad thing and yet websites lock their content behind these code executions. This effectively forces us to allow them to run code on our machines just so we can see their sites, code we know nothing about!

But Jon, your saying, JavaScript is a basic scripting language, can't we just look through what is being run in a ~<script>~ tag or open /.js/ files linked to the webpage and see what is running? We could just audit the code ourselves, right? What's the big deal? Well, first of all, auditing this code is becoming increasingly more difficult for a few reasons!
1. Websites are rarely using JavaScript in-between ~<script>...</script>~ tags.
2. Even if we do have access to the JavaScript inside /.js/ files or ~<script>...</script>~ tags, this code is often 'minimized', which makes it more difficult to read
3. The JavaScript used by websites is becoming increasingly more complex, adding to the difficulty in auditing it
4. JavaScript now often uses large libraries which we would also have to be familiar with
So, you see, this could be very bad for us since it is so hard to audit the code and many users simply won't do it!

* Well, That Sucks, How Did We Get Here, and How Do We go Back?
The bad news is that going back might not be as easy as we'd hope, but that comes back to how I think we got here. JavaScript was once hailed for what you could do with it beyond static HTML pages and has been expended (either organically or through extensions and libraries) to be able to do many more things including reducing page transition and loading times using asynchronous connections and updating only portions of a page. JavaScript also allows for infinite scrolling and other features that keep people on websites. This is important for some versicles, like art, photography, and video sites where site owners can ensure continued engagement from the consumers by constantly feeding them new content to consume. Historically as well, much of these features started springing up /before/ other standards were fully adopted, which had led to a culture of, if you can't view my site, get a browser that can. I go over this is greater detail when I talk about the "best viewed in" era of the mid and late 1990's. This culture led to laziness and a lack of professional best practices to ensure that /everyone/ could view a page. In short no one cares if your browser has JavaScript enabled. This is evident by the messages you'll see if you try to view certain pages without JavaScript.

An illustration would be to download ~elinks~ (or another terminal browser) if you are on GNU/Linux, or disable JavaScript (this can be done in browser settings or using extensions such a NoScript) in a graphical browser and visit a site like StackOverflow (or many of the Stack* sites). You'll simply be greeted with a message which reads "enable JavaScript to view the site". In fact you don't have to go that far. I love [[https://onigirionegai.info/~yayoi][Yayoi]], but her site uses a template that relays a lot on JavaScript, so you'll get a message like this just be doing the above and visiting her site. To her credit (and that of the developer of the template) the site doesn't bar access to the content like many other sites and the message is more "best viewed with JavaScript enabled" then just commanding you to enable it, but the message is there nonetheless even if it doesn't need to be, because the site works perfectly fine without JavaScript.

So, we're back to what can be done, and unfortunately, given the history, the only thing that /could/ be done is to champion an entire cultural shift. We have seen new cultural shifts coming up in the past few years including stronger inclusion initiatives. To be honest, and I don't mean to diminish the plight of marginalized populations, but I feel excluded when I can't use the technology that I am most comfortable with to access your content and I think people need to think about the message they send when they put messages like "enable JavaScript to view this site" on their pages or when the site simply doesn't load at all without JavaScript (as is the case with YouTube and Odysse). That message being, if you don't have JavaScript, don't have it enabled, and aren't willing to just let us execute arbitrary code on your computer, you don't belong here! Head over to my discussion area and tell me what you think!
